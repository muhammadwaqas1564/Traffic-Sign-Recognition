# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/174LSO5jWYWG0aLX65XQHeKFfumd6q7ws
"""

import tensorflow as tf
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split
import numpy as np
import os
import cv2

from google.colab import drive
drive.mount('/content/drive')

import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical

# Function to load and preprocess training data
def load_gtsrb_train_data(data_dir):
    images = []
    labels = []
    for class_id in range(43):  # 43 classes
        class_dir = os.path.join(data_dir, str(class_id))  # Use integer folder names like '0', '1', etc.
        if os.path.exists(class_dir):  # Check if the folder exists
            for img_name in os.listdir(class_dir):
                img_path = os.path.join(class_dir, img_name)
                img = cv2.imread(img_path)
                img = cv2.resize(img, (64, 64))  # Resize images to 64x64 pixels
                images.append(img)
                labels.append(class_id)
    images = np.array(images)
    labels = np.array(labels)
    return images, labels

# Path to your dataset in Google Drive
train_data_dir = '/content/drive/My Drive/path...'

# Load training data
X_train, y_train = load_gtsrb_train_data(train_data_dir)

# Normalize the images
X_train = X_train.astype('float32') / 255.0

# Convert labels to categorical format (one-hot encoding)
y_train = to_categorical(y_train, 43)

# Split the dataset into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

print(f"Training samples: {X_train.shape[0]}")
print(f"Validation samples: {X_val.shape[0]}")

import pandas as pd

def load_gtsrb_test_data(test_images_dir, test_labels_csv):
    try:
        # Load the test labels from CSV
        labels_df = pd.read_csv(test_labels_csv, sep=',')
        print("CSV Columns:", labels_df.columns)  # Debug: Print columns
        images = []
        labels = []
        for _, row in labels_df.iterrows():
            img_path = os.path.join(test_images_dir, row['Path'])  # Adjust column name as needed
            print(f"Loading image: {img_path}")  # Debug: Print image path
            img = cv2.imread(img_path)
            if img is None:
                print(f"Error: Could not load image at {img_path}. Skipping.")
                continue  # Skip this image if it cannot be loaded
            img = cv2.resize(img, (64, 64))  # Resize to 64x64 pixels
            images.append(img)
            labels.append(row['ClassId'])
        images = np.array(images)
        labels = np.array(labels)
        return images, labels
    except KeyError as e:
        print(f"Error: Column {e} not found in CSV file. Please check the column names.")
        return None, None
    except pd.errors.EmptyDataError:
        print("Error: The CSV file is empty or could not be read. Please check the file.")
        return None, None

# Paths to test images and labels in Google Drive
test_images_dir = '/content/drive/My Drive/Test path...'
test_labels_csv = '/content/drive/My Drive/Test.csv path...'

# Load test data
X_test, y_test = load_gtsrb_test_data(test_images_dir, test_labels_csv)

# Normalize the images
X_test = X_test.astype('float32') / 255.0

# Convert labels to categorical format (one-hot encoding)
y_test = to_categorical(y_test, 43)

import tensorflow as tf
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Image data augmentation
datagen = ImageDataGenerator(
    rotation_range=15,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.1,
    zoom_range=0.1,
    horizontal_flip=False,
    fill_mode='nearest'
)

# Load pre-trained MobileNetV2 model + higher-level layers
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(64, 64, 3))

# Freeze the base model layers
base_model.trainable = False

# Add new layers on top for traffic sign classification
model = Sequential([
    base_model,
    GlobalAveragePooling2D(),
    Dropout(0.5),
    Dense(256, activation='relu'),
    Dropout(0.5),
    Dense(43, activation='softmax')  # 43 classes for GTSRB dataset
])

# Compile the model
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
history = model.fit(
    datagen.flow(X_train, y_train, batch_size=32),
    validation_data=(X_val, y_val),
    epochs=20,
    steps_per_epoch=len(X_train) // 32,
    validation_steps=len(X_val) // 32
)

# Evaluate the model
test_loss, test_acc = model.evaluate(X_test, y_test)
print(f"Test accuracy: {test_acc * 100:.2f}%")

# Save the model to Google Drive
model.save("/content/drive/My Drive path... /traffic_sign_recognition_mobilenet.h5")

